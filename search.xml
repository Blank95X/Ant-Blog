<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PowerShell：在此系统上禁止运行脚本</title>
    <url>/2025/03/10/2025-3-10/</url>
    <content><![CDATA[<p>查看当前用户的执行策略：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">get-executionpolicy</span></span><br></pre></td></tr></table></figure>

<p>返回 <code>Restricted</code> （默认）则是无法执行脚本。</p>
<p>解除限制：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set-executionpolicy</span> remotesigned</span><br></pre></td></tr></table></figure>
<p>如果运行后提示：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Windows PowerShell 已成功更新你的执行策略，但在更具体的作业域中定义的策略覆盖该设置了。由于发生覆盖，你的外壳程序将保留当前的有效执行策略受限制。</span><br></pre></td></tr></table></figure>

<p>说明当前用户的策略还未更改，继续执行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned <span class="literal">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure>

<p>再次查看当前用户的执行策略，发现已更改。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">get-executionpolicy</span></span><br><span class="line">RemoteSigned</span><br></pre></td></tr></table></figure>

<p>之后就可以执行脚本了。</p>
<hr>
<p>参考文章</p>
<p><a href="https://syxdevcode.github.io/2021/09/04/PowerShell%EF%BC%9A%E5%9B%A0%E4%B8%BA%E5%9C%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC%EF%BC%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/">syxdevcode的博客</a></p>
<p><a href="https://smallsquare.github.io/Powershell-disable-runing-scripts/">smallsquare的博客</a></p>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHubPages+hexo 部署个人在线博客</title>
    <url>/2025/03/09/2025-3-9/</url>
    <content><![CDATA[<p>系统环境： windows11</p>
<h1 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h1><p>先决条件： <code>nodejs</code> 和 <code>git</code> 环境，这里不赘述。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>验证是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<h1 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h1><p>初始化：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init &lt;floder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;floder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>部署：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>在<a href="http://localhost:4000/">localhost:4000</a>查看博客界面。</p>
<h1 id="部署到-github-pages"><a href="#部署到-github-pages" class="headerlink" title="部署到 github pages"></a>部署到 github pages</h1><h2 id="生成-sshkey"><a href="#生成-sshkey" class="headerlink" title="生成 sshkey"></a>生成 sshkey</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -r rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>一直按回车即可。如果提示 sshkey 已存在，选择覆盖（后果自负）。</p>
<p>生成的密钥保存在 <code>C:\Users\yourusername\.ssh\id_rsa.pub</code> 这个文件中，下一步要用。</p>
<h2 id="创建-github-pages-仓库"><a href="#创建-github-pages-仓库" class="headerlink" title="创建 github pages 仓库"></a>创建 github pages 仓库</h2><p>在 github 上创建名为 <code>yourusername.github.io</code> 的仓库。</p>
<p>在 github 上打开个人设置，在侧边栏找到 <code>SSH and GPG keys</code> ，点击它。之后在右边找到 <code>New SSH key</code> ，点击它。</p>
<p><code>Title</code> 随意填写，<code>Key type</code> 选择 <code>Authentication Key</code> 。用任意文本编辑器打开上一步生成的密钥文件，复制里面所有内容，粘贴到 <code>key</code> 部分。然后点击 <code>Add SSH key</code> 确认。</p>
<h2 id="填写仓库配置"><a href="#填写仓库配置" class="headerlink" title="填写仓库配置"></a>填写仓库配置</h2><p>回到本地博客的文件夹内，找到 <code>_config.yml</code> 这个文件，打开。</p>
<p>在文件末尾找到：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>改成：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/explame/explame.github.io.git</span> <span class="comment"># 你的仓库的 git 链接</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span> <span class="comment"># 也可能是 master ，具体查看自己的仓库。</span></span><br></pre></td></tr></table></figure>

<h2 id="安装一键部署工具并上传"><a href="#安装一键部署工具并上传" class="headerlink" title="安装一键部署工具并上传"></a>安装一键部署工具并上传</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>清理文件并上传：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>

<p>片刻之后可以查看名为你的仓库名的URL，看看是否部署成功。</p>
<p>例子： <a href="http://yourusername.github.io/">http://yourusername.github.io</a></p>
<hr>
<p>参考文章</p>
<p><a href="https://hexo.io/zh-cn/docs/github-pages.html">hexo官方教程</a></p>
]]></content>
      <tags>
        <tag>windows</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 部署 photoPrism</title>
    <url>/2025/03/11/photoPrism/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>把带地理位置信息的照片上传到 google 相册后，可以在地图中查看每张照片在地图上的标点。但是 google 相册云空间有限；使用 mod 的话总感觉有风险；并且上传照片到云上也怕隐私泄露（ google 之前拿用户照片来训练 ai ）。</p>
<p>安卓端的 <a href="https://github.com/deckerst/aves">Aves 相册</a>也有这个功能，但是照片必须在本地。然而我不会把大量照片放在一部手机上，更偏向于放在桌面端设备。</p>
<h1 id="部署-photoPrism"><a href="#部署-photoPrism" class="headerlink" title="部署 photoPrism"></a>部署 photoPrism</h1><p>先决条件： 安装 docker ，这里不赘述。</p>
<h2 id="下载配置文件"><a href="#下载配置文件" class="headerlink" title="下载配置文件"></a>下载配置文件</h2><p>打开<a href="https://www.photoprism.app/plus/kb/quickstart">官方文档</a>，找到<a href="https://www.photoprism.app/plus/kb/quickstart#:~:text=Step%201%3A%20Customize%20Configuration">Step 1: Customize Configuration 部分</a>，点击 windows 右边的下载链接，下载配置文件 <code>compose.yaml</code> 。</p>
<h2 id="初始化和启动"><a href="#初始化和启动" class="headerlink" title="初始化和启动"></a>初始化和启动</h2><p>在配置文件的路径下打开 cmd （我放在桌面），依次输入官方提供的两条命令：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">docker compose pull</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>

<p>第一条命令会下载所需的image以及数据库；第二条命令则是以当前配置启动容器，也就是启动 photoprism 。</p>
<p>photoPrism 默认运行在<a href="localhost:2342">本地 2342 端口</a>。启动后打开浏览器， 等待界面加载完毕。登录的账号密码为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">账号：admin</span><br><span class="line">密码：insecure</span><br></pre></td></tr></table></figure>

<p>后续可以在配置文件中修改：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">    <span class="attr">PHOTOPRISM_ADMIN_USER:</span> <span class="string">&quot;admin&quot;</span></span><br><span class="line">    <span class="attr">PHOTOPRISM_ADMIN_PASSWORD:</span> <span class="string">&quot;insecure&quot;</span></span><br></pre></td></tr></table></figure>

<p>登陆后，点击侧边栏中的 Settings ，在右上角找到 language ，可以将界面改为中文。</p>
<h1 id="如何加载已有图片"><a href="#如何加载已有图片" class="headerlink" title="如何加载已有图片"></a>如何加载已有图片</h1><p>打开配置文件，转到95行，可以看到 photoprism 的文件挂载路径。将 <code>~/Photos:/photoprism/originals</code> 其中的 ~&#x2F;Photos 修改为你的照片文件的路径。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">    <span class="comment"># &quot;C:/user/username/folder:/photoprism/folder&quot;       # example</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;~/Pictures:/photoprism/originals&quot;</span>                 <span class="comment"># original media files (photos and videos)</span></span><br><span class="line">    <span class="comment"># - &quot;D:/example/family:/photoprism/originals/family&quot; # *additional* media folders can be mounted like this</span></span><br><span class="line">    <span class="comment"># - &quot;E:/:/photoprism/import&quot;                         # *optional* base folder from which files can be imported to originals</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;./storage:/photoprism/storage&quot;</span>                    <span class="comment"># *writable* storage folder for cache, database, and sidecar files (never remove)</span></span><br></pre></td></tr></table></figure>

<p>重新启动 photoPrism （可以在Docker Desktop中手动重启）。</p>
<p>点击侧边栏的资料库，确认顶部 tab 栏的选项卡为索引，点击开始，等待加载完毕即可。加载时间取决于电脑性能以及照片数量。</p>
<hr>
<p>参考文档</p>
<p><a href="https://www.photoprism.app/plus/kb/quickstart">photoPrism 官方教程</a></p>
]]></content>
      <tags>
        <tag>windows</tag>
        <tag>photos</tag>
        <tag>map</tag>
        <tag>docker</tag>
      </tags>
  </entry>
</search>
