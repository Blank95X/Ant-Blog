<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PowerShell：在此系统上禁止运行脚本</title>
    <url>/2025/03/10/2025-3-10/</url>
    <content><![CDATA[<p>查看当前用户的执行策略：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">get-executionpolicy</span></span><br></pre></td></tr></table></figure>

<p>返回 <code>Restricted</code> （默认）则是无法执行脚本。</p>
<p>解除限制：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set-executionpolicy</span> remotesigned</span><br></pre></td></tr></table></figure>
<p>如果运行后提示：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Windows PowerShell 已成功更新你的执行策略，但在更具体的作业域中定义的策略覆盖该设置了。由于发生覆盖，你的外壳程序将保留当前的有效执行策略受限制。</span><br></pre></td></tr></table></figure>

<p>说明当前用户的策略还未更改，继续执行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned <span class="literal">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure>

<p>再次查看当前用户的执行策略，发现已更改。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">get-executionpolicy</span></span><br><span class="line">RemoteSigned</span><br></pre></td></tr></table></figure>

<p>之后就可以执行脚本了。</p>
<hr>
<p>参考文章</p>
<p><a href="https://syxdevcode.github.io/2021/09/04/PowerShell%EF%BC%9A%E5%9B%A0%E4%B8%BA%E5%9C%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC%EF%BC%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/">syxdevcode的博客</a></p>
<p><a href="https://smallsquare.github.io/Powershell-disable-runing-scripts/">smallsquare的博客</a></p>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Acvitity 初识</title>
    <url>/2025/03/15/AndroidDev/</url>
    <content><![CDATA[<h1 id="要素"><a href="#要素" class="headerlink" title="要素"></a>要素</h1><p>创建一个 Activity 需要以下要素：</p>
<p>Activity 类：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ActivityName</span> : <span class="type">ComponentActivity</span>() &#123;</span><br><span class="line">	<span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        <span class="comment">// code..</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>布局文件：<code>src/main/res/layout/activity_name.xml</code></p>
<p>在 AndroidManifest.xml 文件中注册：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.ActivityName&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">&quot;This is ActivityName&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果需要作为主界面，还需要以下两个属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>第一个安卓 app</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHubPages+hexo 部署个人在线博客</title>
    <url>/2025/03/09/2025-3-9/</url>
    <content><![CDATA[<p>系统环境： windows11</p>
<h1 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h1><p>先决条件： <code>nodejs</code> 和 <code>git</code> 环境，这里不赘述。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>验证是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<h1 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h1><p>初始化：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init &lt;floder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;floder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>部署：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>在<a href="http://localhost:4000/">localhost:4000</a>查看博客界面。</p>
<h1 id="部署到-github-pages"><a href="#部署到-github-pages" class="headerlink" title="部署到 github pages"></a>部署到 github pages</h1><h2 id="生成-sshkey"><a href="#生成-sshkey" class="headerlink" title="生成 sshkey"></a>生成 sshkey</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -r rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>一直按回车即可。如果提示 sshkey 已存在，选择覆盖（后果自负）。</p>
<p>生成的密钥保存在 <code>C:\Users\yourusername\.ssh\id_rsa.pub</code> 这个文件中，下一步要用。</p>
<h2 id="创建-github-pages-仓库"><a href="#创建-github-pages-仓库" class="headerlink" title="创建 github pages 仓库"></a>创建 github pages 仓库</h2><p>在 github 上创建名为 <code>yourusername.github.io</code> 的仓库。</p>
<p>在 github 上打开个人设置，在侧边栏找到 <code>SSH and GPG keys</code> ，点击它。之后在右边找到 <code>New SSH key</code> ，点击它。</p>
<p><code>Title</code> 随意填写，<code>Key type</code> 选择 <code>Authentication Key</code> 。用任意文本编辑器打开上一步生成的密钥文件，复制里面所有内容，粘贴到 <code>key</code> 部分。然后点击 <code>Add SSH key</code> 确认。</p>
<h2 id="填写仓库配置"><a href="#填写仓库配置" class="headerlink" title="填写仓库配置"></a>填写仓库配置</h2><p>回到本地博客的文件夹内，找到 <code>_config.yml</code> 这个文件，打开。</p>
<p>在文件末尾找到：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>改成：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/explame/explame.github.io.git</span> <span class="comment"># 你的仓库的 git 链接</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span> <span class="comment"># 也可能是 master ，具体查看自己的仓库。</span></span><br></pre></td></tr></table></figure>

<h2 id="安装一键部署工具并上传"><a href="#安装一键部署工具并上传" class="headerlink" title="安装一键部署工具并上传"></a>安装一键部署工具并上传</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>清理文件并上传：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>

<p>片刻之后可以查看名为你的仓库名的URL，看看是否部署成功。</p>
<p>例子： <a href="http://yourusername.github.io/">http://yourusername.github.io</a></p>
<hr>
<p>参考文章</p>
<p><a href="https://hexo.io/zh-cn/docs/github-pages.html">hexo官方文档</a></p>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 本地部署 photoPrism</title>
    <url>/2025/03/11/photoPrism/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>把带地理位置信息的照片上传到 google 相册后，可以在地图中查看每张照片在地图上的标点。但是 google 相册云空间有限；使用 mod 的话总感觉有风险；并且上传照片到云上也怕隐私泄露（ google 之前拿用户照片来训练 ai ）。</p>
<p>安卓端开源的 <a href="https://github.com/deckerst/aves">Aves 相册</a>也有这个功能，但是照片必须在本地。然而我不会把大量照片放在一部手机上，更偏向于放在桌面端设备。</p>
<p>在网上搜索开源照片管理工具，找到了这篇<a href="https://www.cnblogs.com/ryanyangcs/p/18322866">云部署教程</a>推荐。</p>
<h1 id="photoPrism-介绍"><a href="#photoPrism-介绍" class="headerlink" title="photoPrism 介绍"></a>photoPrism 介绍</h1><ul>
<li>开源</li>
<li>google 相册平替</li>
<li>具有基本的 AI 分类功能</li>
</ul>
<h1 id="部署-photoPrism"><a href="#部署-photoPrism" class="headerlink" title="部署 photoPrism"></a>部署 photoPrism</h1><p>先决条件： 安装 Docker Desktop ，这里不赘述。</p>
<h2 id="下载配置文件"><a href="#下载配置文件" class="headerlink" title="下载配置文件"></a>下载配置文件</h2><p>打开<a href="https://www.photoprism.app/plus/kb/quickstart">官方文档</a>，找到<a href="https://www.photoprism.app/plus/kb/quickstart#:~:text=Step%201%3A%20Customize%20Configuration">Step 1: Customize Configuration 部分</a>，点击 windows 右边的下载链接，下载配置文件 <code>compose.yaml</code> 。</p>
<h2 id="初始化和启动"><a href="#初始化和启动" class="headerlink" title="初始化和启动"></a>初始化和启动</h2><p>在配置文件的路径下打开 cmd 。注意，接下来的命令会在配置文件的路径下创建 photoPrism 实例（刚开始没注意，放在桌面启动， C 盘差点炸了）。</p>
<p>依次输入官方提供的两条命令：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">docker compose pull</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>

<p>第一条命令会下载所需的 image 以及数据库；第二条命令则是以当前配置启动 photoprism 。</p>
<p>photoPrism 默认运行在<a href="localhost:2342">本地 2342 端口</a>。启动后打开浏览器， 等待界面加载完毕。登录的账号密码为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">账号：admin</span><br><span class="line">密码：insecure</span><br></pre></td></tr></table></figure>

<p>后续可以在配置文件中修改：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">    <span class="attr">PHOTOPRISM_ADMIN_USER:</span> <span class="string">&quot;admin&quot;</span></span><br><span class="line">    <span class="attr">PHOTOPRISM_ADMIN_PASSWORD:</span> <span class="string">&quot;insecure&quot;</span></span><br></pre></td></tr></table></figure>

<p>登陆后，点击左边侧边栏中的 Settings ，之后在右上角找到 language ，可以将界面改为中文。</p>
<h1 id="如何加载已有图片"><a href="#如何加载已有图片" class="headerlink" title="如何加载已有图片"></a>如何加载已有图片</h1><p>打开配置文件，转到95行，可以看到 photoprism 的文件挂载路径。将 <code>~/Photos:/photoprism/originals</code> 其中的 <code>~/Photos</code> 修改为你的照片文件的路径。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">    <span class="comment"># &quot;C:/user/username/folder:/photoprism/folder&quot;       # example</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;~/Pictures:/photoprism/originals&quot;</span>                 <span class="comment"># original media files (photos and videos)</span></span><br><span class="line">    <span class="comment"># - &quot;D:/example/family:/photoprism/originals/family&quot; # *additional* media folders can be mounted like this</span></span><br><span class="line">    <span class="comment"># - &quot;E:/:/photoprism/import&quot;                         # *optional* base folder from which files can be imported to originals</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;./storage:/photoprism/storage&quot;</span>                    <span class="comment"># *writable* storage folder for cache, database, and sidecar files (never remove)</span></span><br></pre></td></tr></table></figure>

<p>重新启动 photoPrism （可以在 Docker Desktop 中手动重启）。</p>
<p>点击侧边栏的资料库，确认顶部 tab 栏的选项卡为索引，点击开始，等待加载完毕即可。加载时间取决于电脑性能以及照片数量。</p>
<hr>
<p>参考文档</p>
<p><a href="https://www.cnblogs.com/ryanyangcs/p/18322866">米开朗基杨的博客</a></p>
<p><a href="https://www.photoprism.app/plus/kb/quickstart">photoPrism 官方文档</a></p>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>kotlin 基本语法</title>
    <url>/2025/03/15/kotlinLearn/</url>
    <content><![CDATA[<h1 id="hello-kotlin"><a href="#hello-kotlin" class="headerlink" title="hello kotlin"></a>hello kotlin</h1><p>在 IDEA 中新建一个 kotlin 项目，添加“ kotlin 文件”（注意不是类），输入以下代码，然后构建并运行，即可在终端看到输出。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	println(<span class="string">&quot;hello kotlin&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>语句末尾不需要分号。</p>
<h1 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h1><p>kotlin 只有两种变量声明关键字：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> a = <span class="number">10</span> <span class="comment">// 不可变变量</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">20</span> <span class="comment">// 可变变量</span></span><br></pre></td></tr></table></figure>

<p>kotlin 可自动推导变量类型。也可显式声明变量类型。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> a : <span class="built_in">Int</span> = <span class="number">10</span> <span class="comment">// 显式声明</span></span><br><span class="line"><span class="keyword">val</span> a = <span class="number">10</span> <span class="comment">// 隐式声明</span></span><br></pre></td></tr></table></figure>

<p><code>Int</code>为对象类型，而非 java 中的基本数据类型<code>int</code>。 kotlin 完全舍弃了 java 中的基本数据类型，每一个变量都是对象。</p>
<h1 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h1><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funName</span><span class="params">(param1 : <span class="type">Int</span> , param2 : <span class="type">Int</span>)</span></span> : <span class="built_in">Int</span>&#123;</span><br><span class="line">	<span class="comment">// code</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>param1 : Int , param2 : Int</code>声明变量名及其类型</li>
<li><code>: Int</code>声明返回值类型，不声明时返回空。</li>
</ul>
<p>两者都是可选的。</p>
<h2 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h2><p>当函数体只有一行时，可写为：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funName</span><span class="params">(param1 : <span class="type">Int</span> , param2 : <span class="type">Int</span>)</span></span> : <span class="built_in">Int</span> = max(param1 : <span class="built_in">Int</span> , param2 : <span class="built_in">Int</span>)</span><br></pre></td></tr></table></figure>

<p>这里以<code>max</code>函数为例子，其作用是返回两者中较大的一个。</p>
<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>kotlin 中 if 有返回值：条件分支中的最后一行代码的返回值。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funName</span><span class="params">(num1 : <span class="type">Int</span> , num2 : <span class="type">Int</span>)</span></span> : <span class="built_in">Int</span>&#123;</span><br><span class="line">	<span class="keyword">val</span> value = <span class="keyword">if</span>(num1&gt;num2)&#123;</span><br><span class="line">		num1</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		num2</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>显然<code>value</code>是多余的，可以直接返回判断体：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funName</span><span class="params">(num1 : <span class="type">Int</span> , num2 : <span class="type">Int</span>)</span></span> : <span class="keyword">if</span>(num1&gt;num2) num1 <span class="keyword">else</span> num2</span><br></pre></td></tr></table></figure>

<p>这里写成了<a href="#%E8%AF%AD%E6%B3%95%E7%B3%96">语法糖</a>。</p>
<p>一般 if 语句不止一行，为什么也可以写成语法糖呢？我的理解是，如果函数体中只有一个逻辑块（一个判断流程，一条赋值语句等），就可以写成语法糖。</p>
<h2 id="when"><a href="#when" class="headerlink" title="when"></a>when</h2><p>作用约等于<code>switch</code>。</p>
<p>格式：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">when</span>( ... )&#123;</span><br><span class="line">	匹配值 -&gt; &#123; 执行逻辑 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="精确匹配"><a href="#精确匹配" class="headerlink" title="精确匹配"></a>精确匹配</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funName</span><span class="params">(name : <span class="type">String</span>)</span></span> = <span class="keyword">when</span>(name)&#123;</span><br><span class="line">	<span class="string">&quot;Tom&quot;</span> -&gt; &#123; <span class="number">86</span> &#125;</span><br><span class="line">	<span class="string">&quot;Jim&quot;</span> -&gt; <span class="number">77</span> <span class="comment">// 当只有一行时，花括号可以省略。</span></span><br><span class="line">	<span class="keyword">else</span> -&gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类型匹配"><a href="#类型匹配" class="headerlink" title="类型匹配"></a>类型匹配</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funName</span><span class="params">(num : <span class="type">Number</span>)</span></span> = <span class="keyword">when</span>(num)&#123;</span><br><span class="line">	<span class="keyword">is</span> <span class="built_in">Int</span> -&gt; println(<span class="string">&quot;num is Int&quot;</span>)</span><br><span class="line">	<span class="keyword">is</span> <span class="built_in">Double</span> -&gt; println(<span class="string">&quot;num is Double&quot;</span>)</span><br><span class="line">	<span class="keyword">else</span> -&gt; prinln(<span class="string">&quot;num not support&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>is</code> 是 kotlin 的关键字，作用就像 java 中的<code>instanceof</code>一样。</p>
<h3 id="无参写法"><a href="#无参写法" class="headerlink" title="无参写法"></a>无参写法</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funName</span><span class="params">(name : <span class="type">String</span>)</span></span> = <span class="keyword">when</span>&#123;</span><br><span class="line">	name == <span class="string">&quot;Tom&quot;</span> -&gt; <span class="number">86</span></span><br><span class="line">	name == <span class="string">&quot;Jim&quot;</span> -&gt; <span class="number">77</span></span><br><span class="line">	name.startsWith(<span class="string">&quot;Mike&quot;</span>) -&gt; <span class="number">100</span></span><br><span class="line">	<span class="keyword">else</span> -&gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可用于模糊匹配。</p>
<p>kotlin 中比较两个对象是否相同可以用 <code>==</code>， java 中需要用<code>equals</code>函数。</p>
<h1 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h1><h2 id="for-in"><a href="#for-in" class="headerlink" title="for-in"></a>for-in</h2><h3 id="区间定义"><a href="#区间定义" class="headerlink" title="区间定义"></a>区间定义</h3><p>定义一个闭区间：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> range = <span class="number">0.</span><span class="number">.10</span> <span class="comment">// 即[0,10]</span></span><br></pre></td></tr></table></figure>

<p>其中<code>..</code>是关键字。</p>
<p>左闭右开区间：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">range = <span class="number">0</span> until <span class="number">10</span> <span class="comment">// [0,10)</span></span><br></pre></td></tr></table></figure>

<p>降序区间：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">range = <span class="number">10</span> downTo <span class="number">0</span> <span class="comment">// [10,0]</span></span><br></pre></td></tr></table></figure>

<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funName</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">0.</span><span class="number">.10</span>)&#123;</span><br><span class="line">		<span class="comment">// code</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funName</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(i <span class="keyword">in</span> range)&#123;</span><br><span class="line">		<span class="comment">// code</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="变量自增"><a href="#变量自增" class="headerlink" title="变量自增"></a>变量自增</h3><p>使用<code>step</code>关键字。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funName</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">0.</span><span class="number">.10</span> step <span class="number">2</span>)&#123;</span><br><span class="line">		<span class="comment">// code</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每次循环之间 i 自增2。如果不写则默认自增1。</p>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>Person 类：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> name = <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">var</span> age = <span class="number">0</span></span><br><span class="line">	<span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">		println(name + <span class="string">&quot; is eating. He is &quot;</span> + age + <span class="string">&quot; years old.&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例化：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> p = Person()</span><br></pre></td></tr></table></figure>

<p>没有像 java 中的<code>new</code>关键字。</p>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>kotlin 中默认每一个非抽象类都是无法继承的。使用<code>open</code>关键字让类变为可继承。</p>
<p>抽象类无法创建实例，必须被继承后才能实例化。所以抽象类必须是可继承的。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">	<span class="comment">// code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="type">Person</span>() &#123;</span><br><span class="line">	<span class="keyword">var</span> sno = <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">var</span> grade = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>子类使用<code>:</code>来继承父类。</p>
]]></content>
      <categories>
        <category>第一个安卓 app</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
      </tags>
  </entry>
</search>
