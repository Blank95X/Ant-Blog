<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PowerShell：在此系统上禁止运行脚本</title>
    <url>/2025/03/10/2025-3-10/</url>
    <content><![CDATA[<p>查看当前用户的执行策略：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">get-executionpolicy</span></span><br></pre></td></tr></table></figure>

<p>返回 <code>Restricted</code> （默认）则是无法执行脚本。</p>
<p>解除限制：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set-executionpolicy</span> remotesigned</span><br></pre></td></tr></table></figure>
<p>如果运行后提示：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Windows PowerShell 已成功更新你的执行策略，但在更具体的作业域中定义的策略覆盖该设置了。由于发生覆盖，你的外壳程序将保留当前的有效执行策略受限制。</span><br></pre></td></tr></table></figure>

<p>说明当前用户的策略还未更改，继续执行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned <span class="literal">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure>

<p>再次查看当前用户的执行策略，发现已更改。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">get-executionpolicy</span></span><br><span class="line">RemoteSigned</span><br></pre></td></tr></table></figure>

<p>之后就可以执行脚本了。</p>
<hr>
<p>参考文章</p>
<p><a href="https://syxdevcode.github.io/2021/09/04/PowerShell%EF%BC%9A%E5%9B%A0%E4%B8%BA%E5%9C%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC%EF%BC%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/">syxdevcode的博客</a></p>
<p><a href="https://smallsquare.github.io/Powershell-disable-runing-scripts/">smallsquare的博客</a></p>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHubPages+hexo 部署个人在线博客</title>
    <url>/2025/03/09/2025-3-9/</url>
    <content><![CDATA[<p>系统环境： windows11</p>
<h1 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h1><p>先决条件： <code>nodejs</code> 和 <code>git</code> 环境，这里不赘述。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>验证是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<h1 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h1><p>初始化：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init &lt;floder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;floder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>部署：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>在<a href="http://localhost:4000/">localhost:4000</a>查看博客界面。</p>
<h1 id="部署到-github-pages"><a href="#部署到-github-pages" class="headerlink" title="部署到 github pages"></a>部署到 github pages</h1><h2 id="生成-sshkey"><a href="#生成-sshkey" class="headerlink" title="生成 sshkey"></a>生成 sshkey</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -r rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>一直按回车即可。如果提示 sshkey 已存在，选择覆盖（后果自负）。</p>
<p>生成的密钥保存在 <code>C:\Users\yourusername\.ssh\id_rsa.pub</code> 这个文件中，下一步要用。</p>
<h2 id="创建-github-pages-仓库"><a href="#创建-github-pages-仓库" class="headerlink" title="创建 github pages 仓库"></a>创建 github pages 仓库</h2><p>在 github 上创建名为 <code>yourusername.github.io</code> 的仓库。</p>
<p>在 github 上打开个人设置，在侧边栏找到 <code>SSH and GPG keys</code> ，点击它。之后在右边找到 <code>New SSH key</code> ，点击它。</p>
<p><code>Title</code> 随意填写，<code>Key type</code> 选择 <code>Authentication Key</code> 。用任意文本编辑器打开上一步生成的密钥文件，复制里面所有内容，粘贴到 <code>key</code> 部分。然后点击 <code>Add SSH key</code> 确认。</p>
<h2 id="填写仓库配置"><a href="#填写仓库配置" class="headerlink" title="填写仓库配置"></a>填写仓库配置</h2><p>回到本地博客的文件夹内，找到 <code>_config.yml</code> 这个文件，打开。</p>
<p>在文件末尾找到：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>改成：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/explame/explame.github.io.git</span> <span class="comment"># 你的仓库的 git 链接</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span> <span class="comment"># 也可能是 master ，具体查看自己的仓库。</span></span><br></pre></td></tr></table></figure>

<h2 id="安装一键部署工具并上传"><a href="#安装一键部署工具并上传" class="headerlink" title="安装一键部署工具并上传"></a>安装一键部署工具并上传</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>清理文件并上传：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>

<p>片刻之后可以查看名为你的仓库名的URL，看看是否部署成功。</p>
<p>例子： <a href="http://yourusername.github.io/">http://yourusername.github.io</a></p>
<hr>
<p>参考文章</p>
<p><a href="https://hexo.io/zh-cn/docs/github-pages.html">hexo官方文档</a></p>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Acvitity 初识</title>
    <url>/2025/03/15/Activity/</url>
    <content><![CDATA[<h1 id="要素"><a href="#要素" class="headerlink" title="要素"></a>要素</h1><p>创建一个 Activity 需要以下要素：</p>
<p>Activity 类：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ActivityName</span> : <span class="type">ComponentActivity</span>() &#123;</span><br><span class="line">	<span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        <span class="comment">// code..</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>布局文件： <code>src/main/res/layout/activity_name.xml</code></p>
<p>在 AndroidManifest.xml 文件中注册：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.ActivityName&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">&quot;This is ActivityName&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果需要作为主界面，还需要以下两个属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="获取控件"><a href="#获取控件" class="headerlink" title="获取控件"></a>获取控件</h1><p>一般使用 <code>findViewById</code> 方法获取控件：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> textView = findViewById&lt;TextView&gt;(R.id.textView)</span><br></pre></td></tr></table></figure>

<p>使用 kotlin 的安卓项目中，可以在模块级 <code>build.gradle</code> 文件中启用 <code>viewBindding</code>：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    viewBinding &#123;</span><br><span class="line">        enabled = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就可以直接使用控件 id 获取控件：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> binding = ActivityMainBinding.inflate(layoutInflater)</span><br><span class="line">setContentView(binding.root)</span><br><span class="line"><span class="keyword">val</span> button1 = binding.button1</span><br></pre></td></tr></table></figure>

<p>同时 Android Studio 会自动生成一个 <code>import com.example.app.databinding.ActivityMainBinding</code> 语句。</p>
<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>安卓系统使用 task 来管理 Activity ，一个 task 就是存放在返回栈中的 Activity 集合。</p>
<p>每个 Activity 都有一个生命周期，包括以下几个状态：</p>
<table>
<thead>
<tr>
<th align="center">状态</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">运行状态</td>
<td align="center">完全可见，位于栈顶</td>
</tr>
<tr>
<td align="center">暂停状态</td>
<td align="center">可见，不位于栈顶</td>
</tr>
<tr>
<td align="center">停止状态</td>
<td align="center">完全不可见，不位于栈顶</td>
</tr>
<tr>
<td align="center">销毁状态</td>
<td align="center">从栈中移除</td>
</tr>
</tbody></table>
<p>对应的回调方法：</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>onCreate</code></td>
<td align="center">创建时调用</td>
</tr>
<tr>
<td align="center"><code>onStart</code></td>
<td align="center">启动时调用</td>
</tr>
<tr>
<td align="center"><code>onResume</code></td>
<td align="center">恢复时调用</td>
</tr>
<tr>
<td align="center"><code>onPause</code></td>
<td align="center">暂停时调用</td>
</tr>
<tr>
<td align="center"><code>onStop</code></td>
<td align="center">停止（完全不可见）时调用</td>
</tr>
<tr>
<td align="center"><code>onReStart</code></td>
<td align="center">重启时调用</td>
</tr>
<tr>
<td align="center"><code>onDestroy</code></td>
<td align="center">销毁时调用</td>
</tr>
</tbody></table>
<pre class="mermaid">graph TD
    A((启动Activity)) --> B[onCreate]
    B --> C[onStart]
    C --> D[onResume]
    D --> E((Activity运行中))

    E --> |其他Activity来到前台| F[onPause] 

    F --> |Activity不再可见| G[onStop]
    G --> |Activity被销毁| H[onDestroy]
    H --> I((关闭Activity))

    F --> |返回上一个Activity| D
    
    G --> |返回上一个Activity| K[onReStart]
    K --> C

    G & F --> |其他优先级高的程序需要内存| J((杀掉进程))
    J --> |返回上一个Activity| B</pre>

<h2 id="临时保存数据"><a href="#临时保存数据" class="headerlink" title="临时保存数据"></a>临时保存数据</h2><p>在 Activity 生命周期中，有时需要保存数据，可以使用 <code>onSaveInstanceState</code> 方法：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSaveInstanceState</span><span class="params">(outState: <span class="type">Bundle</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onSaveInstanceState(outState)</span><br><span class="line">    outState.putString(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在 <code>onCreate</code> 方法中获取：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">    <span class="keyword">if</span> (savedInstanceState != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> value = savedInstanceState.getString(<span class="string">&quot;key&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="启动模式"><a href="#启动模式" class="headerlink" title="启动模式"></a>启动模式</h1><p>Activity 的启动模式有以下几种：</p>
<table>
<thead>
<tr>
<th align="center">模式</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>standard</code>（默认）</td>
<td align="center">每次启动都会创建一个新的 Activity 实例，不管栈中是否已经存在</td>
</tr>
<tr>
<td align="center"><code>singleTop</code></td>
<td align="center">如果栈顶是该 Activity 实例，则直接使用；否则创建新实例</td>
</tr>
<tr>
<td align="center"><code>singleTask</code></td>
<td align="center">如果栈中已经存在该 Activity 实例，则将其上方的 Activity 实例全部出栈；否则创建新实例</td>
</tr>
<tr>
<td align="center"><code>singleInstance</code></td>
<td align="center">该 Activity 实例独立于其他 Activity 实例，单独存在一个任务栈中</td>
</tr>
</tbody></table>
<p>singleInstance 模式图解：</p>
<pre class="mermaid">graph LR
    subgraph 返回栈A
        A1[Activity1]
        A2[Activity2]

        A1 --> |返回| A2
    end

    subgraph 返回栈B
        A3[Activity3]
    end

        A2 --> |返回| A3
        A2 --> |启动新Activity| A3

        A3 --> |启动新Activity| A1</pre>

<p>Activity 的启动模式可以在 AndroidManifest.xml 文件中设置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.ActivityName&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:launchMode</span>=<span class="string">&quot;singleTop&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>第一个安卓 app - Activity 初识</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Intent 意图</title>
    <url>/2025/03/15/Intent/</url>
    <content><![CDATA[<h1 id="Intent-意图"><a href="#Intent-意图" class="headerlink" title="Intent 意图"></a>Intent 意图</h1><ul>
<li>在 Acitvity 之间跳转</li>
<li>传递数据</li>
<li>启动其他应用的 Activity</li>
</ul>
<p>能被外部启动的 Activity 都需要在 AndroidManifest.xml 文件中注册 <code>android:exported=&quot;true&quot;</code> 属性。</p>
<h2 id="显式-Intent"><a href="#显式-Intent" class="headerlink" title="显式 Intent"></a>显式 Intent</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> intent = Intent(<span class="keyword">this</span>, TargetActivity::<span class="keyword">class</span>.java)</span><br><span class="line">startActivity(intent)</span><br></pre></td></tr></table></figure>

<p><code>Intent</code> 构造函数的参数：</p>
<ol>
<li>上下文</li>
<li>目标活动的类名</li>
</ol>
<p><code>SecondActivity::class.java</code> 相当于 java 中 <code>SecondActivity.class</code> 的写法。</p>
<h2 id="隐式-Intent"><a href="#隐式-Intent" class="headerlink" title="隐式 Intent"></a>隐式 Intent</h2><p>如果一个活动可以被隐式调用，需要在 AndroidManifest.xml 文件中注册：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.TargetActivity&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.activitytest.ACTION_START&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;category android:name=&quot;com.example.activitytest.MY_CATEGORY&quot;/&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- action 只能有一个， category 可以有多个--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>调用：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> intent = Intent(<span class="string">&quot;com.example.activitytest.ACTION_START&quot;</span>)</span><br><span class="line">startActivity(intent)</span><br></pre></td></tr></table></figure>

<p>一个 Intent 可以指定一个 action 和多个 category，只有当 action 和 category 全部匹配时，意图才会被响应。</p>
<h2 id="传递数据"><a href="#传递数据" class="headerlink" title="传递数据"></a>传递数据</h2><p>活动1存放数据：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> intent = Intent(<span class="keyword">this</span>, TargetActivity::<span class="keyword">class</span>.java)</span><br><span class="line">intent.putExtra(<span class="string">&quot;extra_data&quot;</span>, <span class="string">&quot;Hello, TargetActivity&quot;</span>) <span class="comment">// key-value</span></span><br><span class="line">startActivity(intent)</span><br></pre></td></tr></table></figure>

<p>活动2提取数据：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> extraData = intent.getStringExtra(<span class="string">&quot;extra_data&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="隐式传递的更多用法"><a href="#隐式传递的更多用法" class="headerlink" title="隐式传递的更多用法"></a>隐式传递的更多用法</h1><p>安卓系统中有一个内置 action <code>Intent.ACTION_VIEW</code> 可以打开浏览器：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> intent = Intent(Intent.ACTION_VIEW)</span><br><span class="line">intent.<span class="keyword">data</span> = Uri.parse(<span class="string">&quot;http://www.baidu.com&quot;</span>) <span class="comment">// 设置网址，可选</span></span><br><span class="line">startActivity(intent)</span><br></pre></td></tr></table></figure>

<p>当一个活动在 AndroidManifest.xml 中注册了 action 为 <code>Intent.ACTION_VIEW</code> 时，那么这个活动就可以响应打开网页的请求。</p>
<p>同时，还可以 <code>intent-filter</code> 标签中再配置一个 <code>data</code> 标签，用于更精确地指定当前 Activity 能够响应的数据。data 标签中主要可以配置以下内容：</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>android:scheme</code></td>
<td align="center">指定协议</td>
</tr>
<tr>
<td align="center"><code>android:host</code></td>
<td align="center">指定主机名</td>
</tr>
<tr>
<td align="center"><code>android:port</code></td>
<td align="center">指定端口</td>
</tr>
<tr>
<td align="center"><code>android:path</code></td>
<td align="center">指定访问路径</td>
</tr>
<tr>
<td align="center"><code>android:mimeType</code></td>
<td align="center">指定可以处理的数据类型，允许使用通配符</td>
</tr>
</tbody></table>
<p>只有当 data 标签中指定的内容和 Intent 中携带的 Data 完全一致时，当前 Activity 才能够响应该 Intent 。</p>
<blockquote>
<p>如果所有配置都正确，但是跳转的时候打开了系统默认的浏览器，将其禁用再尝试是否可以正常接收跳转浏览器的意图。</p>
</blockquote>
<h1 id="返回数据给上一个活动"><a href="#返回数据给上一个活动" class="headerlink" title="返回数据给上一个活动"></a>返回数据给上一个活动</h1><p>在父活动中使用 <code>startActivityForResult</code> 方法启动子活动：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> intent = Intent(<span class="keyword">this</span>, TargetActivity::<span class="keyword">class</span>.java)</span><br><span class="line">startActivityForResult(intent, <span class="number">1</span>) <span class="comment">// 1 是请求码，用于在之后的回调中判断数据来源</span></span><br></pre></td></tr></table></figure>

<p>子活动返回数据：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主逻辑</span></span><br><span class="line"><span class="keyword">val</span> intent = Intent()</span><br><span class="line">intent.putExtra(<span class="string">&quot;data_return&quot;</span>, <span class="string">&quot;Hello, MainActivity&quot;</span>)</span><br><span class="line">setResult(RESULT_OK, intent)</span><br><span class="line">finish() <span class="comment">// 销毁当前活动</span></span><br></pre></td></tr></table></figure>

<p>父活动接收数据：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityResult</span><span class="params">(requestCode: <span class="type">Int</span>, resultCode: <span class="type">Int</span>, <span class="keyword">data</span>: <span class="type">Intent</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">when</span> (requestCode) &#123;</span><br><span class="line">        <span class="number">1</span> -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (resultCode == Activity.RESULT_OK) &#123;</span><br><span class="line">                <span class="keyword">val</span> returnedData = <span class="keyword">data</span>?.getStringExtra(<span class="string">&quot;data_return&quot;</span>)</span><br><span class="line">                Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;returned data is <span class="variable">$returnedData</span>&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过返回键返回时，子活动中重写 <code>onBackPressed</code> 方法即可：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBackPressed</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// code...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>第一个安卓 app - Activity 初识</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Intent</tag>
      </tags>
  </entry>
  <entry>
    <title>kotlin 基本语法</title>
    <url>/2025/03/15/kotlinLearn/</url>
    <content><![CDATA[<h1 id="hello-kotlin"><a href="#hello-kotlin" class="headerlink" title="hello kotlin"></a>hello kotlin</h1><p>在 IDEA 中新建一个 kotlin 项目，添加“ kotlin 文件”（注意不是类），输入以下代码，然后构建并运行，即可在终端看到输出。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	println(<span class="string">&quot;hello kotlin&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>语句末尾不需要分号。</p>
<h1 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h1><p>kotlin 只有两种变量声明关键字：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> a = <span class="number">10</span> <span class="comment">// 不可变变量</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">20</span> <span class="comment">// 可变变量</span></span><br></pre></td></tr></table></figure>

<p>kotlin 可自动推导变量类型。也可显式声明变量类型。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> a : <span class="built_in">Int</span> = <span class="number">10</span> <span class="comment">// 显式声明</span></span><br><span class="line"><span class="keyword">val</span> a = <span class="number">10</span> <span class="comment">// 隐式声明</span></span><br></pre></td></tr></table></figure>

<p><code>Int</code>为对象类型，而非 java 中的基本数据类型<code>int</code>。 kotlin 完全舍弃了 java 中的基本数据类型，每一个变量都是对象。</p>
<h1 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h1><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funName</span><span class="params">(param1 : <span class="type">Int</span> , param2 : <span class="type">Int</span>)</span></span> : <span class="built_in">Int</span>&#123;</span><br><span class="line">	<span class="comment">// code</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>param1 : Int , param2 : Int</code>声明变量名及其类型</li>
<li><code>: Int</code>声明返回值类型，不声明时返回空。</li>
</ul>
<p>两者都是可选的。</p>
<h2 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h2><p>当函数体只有一行时，可写为：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funName</span><span class="params">(param1 : <span class="type">Int</span> , param2 : <span class="type">Int</span>)</span></span> : <span class="built_in">Int</span> = max(param1 : <span class="built_in">Int</span> , param2 : <span class="built_in">Int</span>)</span><br></pre></td></tr></table></figure>

<p>这里以<code>max</code>函数为例子，其作用是返回两者中较大的一个。</p>
<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>kotlin 中 if 有返回值：条件分支中的最后一行代码的返回值。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funName</span><span class="params">(num1 : <span class="type">Int</span> , num2 : <span class="type">Int</span>)</span></span> : <span class="built_in">Int</span>&#123;</span><br><span class="line">	<span class="keyword">val</span> value = <span class="keyword">if</span>(num1&gt;num2)&#123;</span><br><span class="line">		num1</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		num2</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>显然<code>value</code>是多余的，可以直接返回判断体：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funName</span><span class="params">(num1 : <span class="type">Int</span> , num2 : <span class="type">Int</span>)</span></span> : <span class="keyword">if</span>(num1&gt;num2) num1 <span class="keyword">else</span> num2</span><br></pre></td></tr></table></figure>

<p>这里写成了<a href="#%E8%AF%AD%E6%B3%95%E7%B3%96">语法糖</a>。</p>
<p>一般 if 语句不止一行，为什么也可以写成语法糖呢？我的理解是，如果函数体中只有一个逻辑块（一个判断流程，一条赋值语句等），就可以写成语法糖。</p>
<h2 id="when"><a href="#when" class="headerlink" title="when"></a>when</h2><p>作用约等于<code>switch</code>。</p>
<p>格式：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">when</span>( ... )&#123;</span><br><span class="line">	匹配值 -&gt; &#123; 执行逻辑 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="精确匹配"><a href="#精确匹配" class="headerlink" title="精确匹配"></a>精确匹配</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funName</span><span class="params">(name : <span class="type">String</span>)</span></span> = <span class="keyword">when</span>(name)&#123;</span><br><span class="line">	<span class="string">&quot;Tom&quot;</span> -&gt; &#123; <span class="number">86</span> &#125;</span><br><span class="line">	<span class="string">&quot;Jim&quot;</span> -&gt; <span class="number">77</span> <span class="comment">// 当只有一行时，花括号可以省略。</span></span><br><span class="line">	<span class="keyword">else</span> -&gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类型匹配"><a href="#类型匹配" class="headerlink" title="类型匹配"></a>类型匹配</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funName</span><span class="params">(num : <span class="type">Number</span>)</span></span> = <span class="keyword">when</span>(num)&#123;</span><br><span class="line">	<span class="keyword">is</span> <span class="built_in">Int</span> -&gt; println(<span class="string">&quot;num is Int&quot;</span>)</span><br><span class="line">	<span class="keyword">is</span> <span class="built_in">Double</span> -&gt; println(<span class="string">&quot;num is Double&quot;</span>)</span><br><span class="line">	<span class="keyword">else</span> -&gt; prinln(<span class="string">&quot;num not support&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>is</code> 是 kotlin 的关键字，作用就像 java 中的<code>instanceof</code>一样。</p>
<h3 id="无参写法"><a href="#无参写法" class="headerlink" title="无参写法"></a>无参写法</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funName</span><span class="params">(name : <span class="type">String</span>)</span></span> = <span class="keyword">when</span>&#123;</span><br><span class="line">	name == <span class="string">&quot;Tom&quot;</span> -&gt; <span class="number">86</span></span><br><span class="line">	name == <span class="string">&quot;Jim&quot;</span> -&gt; <span class="number">77</span></span><br><span class="line">	name.startsWith(<span class="string">&quot;Mike&quot;</span>) -&gt; <span class="number">100</span></span><br><span class="line">	<span class="keyword">else</span> -&gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可用于模糊匹配。</p>
<p>kotlin 中比较两个对象是否相同可以用 <code>==</code>， java 中需要用<code>equals</code>函数。</p>
<h1 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h1><h2 id="for-in"><a href="#for-in" class="headerlink" title="for-in"></a>for-in</h2><h3 id="区间定义"><a href="#区间定义" class="headerlink" title="区间定义"></a>区间定义</h3><p>定义一个闭区间：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> range = <span class="number">0.</span><span class="number">.10</span> <span class="comment">// 即[0,10]</span></span><br></pre></td></tr></table></figure>

<p>其中<code>..</code>是关键字。</p>
<p>左闭右开区间：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">range = <span class="number">0</span> until <span class="number">10</span> <span class="comment">// [0,10)</span></span><br></pre></td></tr></table></figure>

<p>降序区间：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">range = <span class="number">10</span> downTo <span class="number">0</span> <span class="comment">// [10,0]</span></span><br></pre></td></tr></table></figure>

<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funName</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">0.</span><span class="number">.10</span>)&#123;</span><br><span class="line">		<span class="comment">// code</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funName</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(i <span class="keyword">in</span> range)&#123;</span><br><span class="line">		<span class="comment">// code</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="变量自增"><a href="#变量自增" class="headerlink" title="变量自增"></a>变量自增</h3><p>使用<code>step</code>关键字。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funName</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">0.</span><span class="number">.10</span> step <span class="number">2</span>)&#123;</span><br><span class="line">		<span class="comment">// code</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每次循环之间 i 自增2。如果不写则默认自增1。</p>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>Person 类：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> name = <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">var</span> age = <span class="number">0</span></span><br><span class="line">	<span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">		println(name + <span class="string">&quot; is eating. He is &quot;</span> + age + <span class="string">&quot; years old.&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例化：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> p = Person()</span><br></pre></td></tr></table></figure>

<p>没有像 java 中的<code>new</code>关键字。</p>
<h1 id="继承与接口"><a href="#继承与接口" class="headerlink" title="继承与接口"></a>继承与接口</h1><p>kotlin 中默认每一个非抽象类都是无法继承的。使用<code>open</code>关键字让类变为可继承。</p>
<p>抽象类无法创建实例，必须被继承后才能实例化。所以抽象类必须是可继承的。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">	<span class="comment">// code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="type">Person</span>() &#123;</span><br><span class="line">	<span class="keyword">var</span> sno = <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">var</span> grade = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>子类使用<code>:</code>来继承父类。同时实现接口也是这个关键字。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="type">Person</span>(), Study &#123;</span><br><span class="line">	<span class="keyword">var</span> sno = <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">var</span> grade = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="单例类"><a href="#单例类" class="headerlink" title="单例类"></a>单例类</h2><p>在内存中只有一个实例的类。</p>
<p>使用<code>object</code>关键字。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span> Singleton &#123;</span><br><span class="line">	<span class="function"><span class="keyword">fun</span> <span class="title">singletonFun</span><span class="params">()</span></span> &#123;</span><br><span class="line">		println(<span class="string">&quot;singletonFun&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数据类"><a href="#数据类" class="headerlink" title="数据类"></a>数据类</h2><p>数据类是一种只保存数据的类。</p>
<p>使用<code>data</code>关键字。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>)</span><br></pre></td></tr></table></figure>

<h1 id="空指针检查"><a href="#空指针检查" class="headerlink" title="空指针检查"></a>空指针检查</h1><p>kotlin 在编译时进行空指针检查，而非运行时。</p>
<p>kotlin 默认所有参数都是非空的，如果想声明一个可为空的变量，需要在变量类型后加<code>?</code>。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name : String? = <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p><code>?</code>表示这个变量可以为空。</p>
<h2 id="判空辅助操作符"><a href="#判空辅助操作符" class="headerlink" title="判空辅助操作符"></a>判空辅助操作符</h2><p><code>?.</code>：如果对象为空则返回 null，否则执行后面的操作。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(a != <span class="literal">null</span>)&#123;</span><br><span class="line">	a.method()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>等价于：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">a?.method()</span><br></pre></td></tr></table></figure>

<hr>
<p><code>?:</code>：如果对象为空则返回后面的值。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> c = <span class="keyword">if</span>(a != <span class="literal">null</span>)&#123;</span><br><span class="line">	a</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>等价于：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> c = a ?: <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="非空断言"><a href="#非空断言" class="headerlink" title="非空断言"></a>非空断言</h2><p><code>!!</code>：强制忽略空指针异常检查。</p>
<p>如：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> a!!.method()</span><br></pre></td></tr></table></figure>

<p>无论 a 是否为 null ，都会执行<code>method()</code>。</p>
<h2 id="let-函数实现一次判断"><a href="#let-函数实现一次判断" class="headerlink" title="let 函数实现一次判断"></a>let 函数实现一次判断</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(a == <span class="literal">null</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">a.method()</span><br><span class="line">a.method2()</span><br></pre></td></tr></table></figure>

<p>等价于：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">a?.let&#123;</span><br><span class="line">	it.method()</span><br><span class="line">	it.method2()</span><br><span class="line">&#125; <span class="comment">// lambda 表达式</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>第一个安卓 app - kotlin 基本语法</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>menu 控件</title>
    <url>/2025/03/15/menu%E6%8E%A7%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="menu-控件"><a href="#menu-控件" class="headerlink" title="menu 控件"></a>menu 控件</h1><p>这里的 menu 控件是指标题栏右上角的菜单按钮。</p>
<p>在 <code>res/menu</code> 文件夹下创建一个 xml 文件，如 <code>main.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/add_item&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;Add&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/remove_item&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;Remove&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 Activity 中重写 <code>onCreateOptionsMenu</code> 方法：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateOptionsMenu</span><span class="params">(menu: <span class="type">Menu</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    menuInflater.inflate(R.menu.main, menu) </span><br><span class="line">    <span class="comment">// menuInflater 这一部分其实是 kotlin 的语法糖，已经自动调用了 getter 方法</span></span><br><span class="line">    <span class="comment">/* inflate 方法接收两个参数：</span></span><br><span class="line"><span class="comment">    第一个是 menu 布局资源文件，</span></span><br><span class="line"><span class="comment">    第二个是要设置这个布局的 menu 对象</span></span><br><span class="line"><span class="comment">    （从哪里来到哪里去）*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 返回 true 表示菜单允许菜单显示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后在 Activity 中重写 <code>onOptionsItemSelected</code> 方法可以自定义菜单选项响应事件。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onOptionsItemSelected</span><span class="params">(item: <span class="type">MenuItem</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">when</span>(item.itemId)&#123;</span><br><span class="line">        R.id.add_item -&gt; Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;add item&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class="line">        R.id.remove_item -&gt; Toast.makeText(<span class="keyword">this</span>,<span class="string">&quot;remove item&quot;</span>,Toast.LENGTH_SHORT).show()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="显示Toast"><a href="#显示Toast" class="headerlink" title="显示Toast"></a>显示Toast</h2><p><code>makeText()</code> 方法的参数：</p>
<ol>
<li>上下文</li>
<li>toast内容（字符串）</li>
<li>显示时长</li>
</ol>
<p>最后再调用 <code>show()</code> 方法即可。</p>
<h1 id="没有标题栏"><a href="#没有标题栏" class="headerlink" title="没有标题栏"></a>没有标题栏</h1><p>在确保 <code>res/values/styles.xml</code> 文件中的 <code>AppTheme</code> 主题中设置了标题栏的情况下：</p>
<ul>
<li>如果使用 <code>ComponentActivity</code> 作为活动的父类，需要手动设置标题栏。</li>
<li>使用 <code>AppCompatActivity</code> 作为活动的父类，可以自动设置标题栏。</li>
</ul>
]]></content>
      <categories>
        <category>第一个安卓 app - 布局和控件</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 本地部署 photoPrism</title>
    <url>/2025/03/11/photoPrism/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>把带地理位置信息的照片上传到 google 相册后，可以在地图中查看每张照片在地图上的标点。但是 google 相册云空间有限；使用 mod 的话总感觉有风险；并且上传照片到云上也怕隐私泄露（ google 之前拿用户照片来训练 ai ）。</p>
<p>安卓端开源的 <a href="https://github.com/deckerst/aves">Aves 相册</a>也有这个功能，但是照片必须在本地。然而我不会把大量照片放在一部手机上，更偏向于放在桌面端设备。</p>
<p>在网上搜索开源照片管理工具，找到了这篇<a href="https://www.cnblogs.com/ryanyangcs/p/18322866">云部署教程</a>推荐。</p>
<h1 id="photoPrism-介绍"><a href="#photoPrism-介绍" class="headerlink" title="photoPrism 介绍"></a>photoPrism 介绍</h1><ul>
<li>开源</li>
<li>google 相册平替</li>
<li>具有基本的 AI 分类功能</li>
</ul>
<h1 id="部署-photoPrism"><a href="#部署-photoPrism" class="headerlink" title="部署 photoPrism"></a>部署 photoPrism</h1><p>先决条件： 安装 Docker Desktop ，这里不赘述。</p>
<h2 id="下载配置文件"><a href="#下载配置文件" class="headerlink" title="下载配置文件"></a>下载配置文件</h2><p>打开<a href="https://www.photoprism.app/plus/kb/quickstart">官方文档</a>，找到<a href="https://www.photoprism.app/plus/kb/quickstart#:~:text=Step%201%3A%20Customize%20Configuration">Step 1: Customize Configuration 部分</a>，点击 windows 右边的下载链接，下载配置文件 <code>compose.yaml</code> 。</p>
<h2 id="初始化和启动"><a href="#初始化和启动" class="headerlink" title="初始化和启动"></a>初始化和启动</h2><p>在配置文件的路径下打开 cmd 。注意，接下来的命令会在配置文件的路径下创建 photoPrism 实例（刚开始没注意，放在桌面启动， C 盘差点炸了）。</p>
<p>依次输入官方提供的两条命令：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">docker compose pull</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>

<p>第一条命令会下载所需的 image 以及数据库；第二条命令则是以当前配置启动 photoprism 。</p>
<p>photoPrism 默认运行在<a href="localhost:2342">本地 2342 端口</a>。启动后打开浏览器， 等待界面加载完毕。登录的账号密码为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">账号：admin</span><br><span class="line">密码：insecure</span><br></pre></td></tr></table></figure>

<p>后续可以在配置文件中修改：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">    <span class="attr">PHOTOPRISM_ADMIN_USER:</span> <span class="string">&quot;admin&quot;</span></span><br><span class="line">    <span class="attr">PHOTOPRISM_ADMIN_PASSWORD:</span> <span class="string">&quot;insecure&quot;</span></span><br></pre></td></tr></table></figure>

<p>登陆后，点击左边侧边栏中的 Settings ，之后在右上角找到 language ，可以将界面改为中文。</p>
<h1 id="如何加载已有图片"><a href="#如何加载已有图片" class="headerlink" title="如何加载已有图片"></a>如何加载已有图片</h1><p>打开配置文件，转到95行，可以看到 photoprism 的文件挂载路径。将 <code>~/Photos:/photoprism/originals</code> 其中的 <code>~/Photos</code> 修改为你的照片文件的路径。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">    <span class="comment"># &quot;C:/user/username/folder:/photoprism/folder&quot;       # example</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;~/Pictures:/photoprism/originals&quot;</span>                 <span class="comment"># original media files (photos and videos)</span></span><br><span class="line">    <span class="comment"># - &quot;D:/example/family:/photoprism/originals/family&quot; # *additional* media folders can be mounted like this</span></span><br><span class="line">    <span class="comment"># - &quot;E:/:/photoprism/import&quot;                         # *optional* base folder from which files can be imported to originals</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;./storage:/photoprism/storage&quot;</span>                    <span class="comment"># *writable* storage folder for cache, database, and sidecar files (never remove)</span></span><br></pre></td></tr></table></figure>

<p>重新启动 photoPrism （可以在 Docker Desktop 中手动重启）。</p>
<p>点击侧边栏的资料库，确认顶部 tab 栏的选项卡为索引，点击开始，等待加载完毕即可。加载时间取决于电脑性能以及照片数量。</p>
<hr>
<p>参考文档</p>
<p><a href="https://www.cnblogs.com/ryanyangcs/p/18322866">米开朗基杨的博客</a></p>
<p><a href="https://www.photoprism.app/plus/kb/quickstart">photoPrism 官方文档</a></p>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>docker</tag>
      </tags>
  </entry>
</search>
